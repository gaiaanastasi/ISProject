%% Clean
clear
close all
clc
format compact

%% Load the dataset
dataset = load('data/clean_dataset.mat');
clean_dataset = dataset.clean_dataset';

%% Extracting features
features = clean_dataset(:,3:end);
target_arousal = clean_dataset(:,1);
target_valence = clean_dataset(:,2);

cv = cvpartition(target_arousal, 'holdout', 0.3);
idxTraining = training(cv);
idxTesting = test(cv);

x_train = features(idxTraining, :);
y_train_arousal = target_arousal(idxTraining, :);
y_train_valance = target_valence(idxTraining, :);

x_test = features(idxTesting, :);
y_test_arousal = target_arousal(idxTesting, :);
y_test_valance = target_valence(idxTesting, :);

sequentialfs_rep = 5;

% Arousal
features_arousal = zeros(54,1);

for i = 1:sequentialfs_rep
    fprintf("Iteration %i\n", i);
    %K-fold cross validation will be used to train and test the neural
    %network that lies in the fun2 function
    c = cvpartition(y_train_arousal, 'k', 10);
    option = statset('display','iter','useParallel',true);
    [selected_arousal, history] = sequentialfs(@criterion, x_train, y_train_arousal, 'cv', c, 'opt', option, 'nfeatures', 5);
    
    % Fetch useful indexes from result of latter sequentialfs
    
   for j = 1:5
        if selected_arousal(j) == 1
            features_arousal(j) = features_arousal(j) + 1;
        end
    end

end
    
    %fprintf("Feature %i\n", features_arousal);

fprintf("\n");
fprintf("*** AROUSAL: "); 
%disp(features_arousal);
fprintf("\n");


%% Function for sequentialfs
function err = criterion(x_train, t_train, x_test, t_test)
    %~1000 samples for training
    net = fitnet(40);
    net.trainParam.showWindow=0;
    xx = x_train';
    tt = t_train';
    net = train(net, xx, tt);
    y=net(x_test'); 
    err = perform(net,t_test',y);
end